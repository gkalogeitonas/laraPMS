requirements:
  - id: RQ-001
    requirement: "Multi-Tenant"
    description: "Each tenant has isolated data and cannot view or modify other tenants' properties or bookings."
    user_story: "As a tenant administrator, I want each tenant's data fully isolated so that no tenant can access another's."
    expected_behavior: "Tenant scoping is enforced on every data query/operation; cross-tenant access is prevented at the ORM and UI layers."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-002 # Dashboard
      - SCR-004 # Property List
      - SCR-005 # Calendar
      - SCR-008 # Bookings Index

  - id: RQ-002
    requirement: "User Management"
    description: "Secure registration and authentication, role-based/permission-based user access."
    user_story: "As a user, I want to sign up and log in securely and have permissions enforced so only authorized actions are allowed."
    expected_behavior: "Users can register, authenticate, and be assigned roles/permissions; unauthorized actions are blocked with proper feedback."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-001 # Login
      - SCR-006 # Registration
      - SCR-016 # Profile Edit
      - SCR-029 # Password Reset
      - SCR-030 # Reset Password Form

  - id: RQ-003
    requirement: "Property Management"
    description: "CRUD for properties, with listing and filtering capabilities."
    user_story: "As a tenant admin, I want to manage my properties (create, edit, delete, list)."
    expected_behavior: "Admin UI provides forms and listings for properties."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-004 # Property List
      - SCR-007 # Property Detail
      - SCR-018 # Property Create
      - SCR-019 # Property Edit

  - id: RQ-004
    requirement: "Room Management"
    description: "CRUD for rooms, with listing and filtering capabilities."
    user_story: "As a tenant admin, I want to manage my rooms (create, edit, delete, list)."
    expected_behavior: "Admin UI provides forms and listings for rooms."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-010 # Rooms Index
      - SCR-011 # Room Create
      - SCR-020 # Room Show
      - SCR-021 # Room Edit

  - id: RQ-005
    requirement: "Bookings"
    description: "Create, update, and cancel bookings; track booking statuses; maintain a calendar view of availability."
    user_story: "As a customer, I want to book, modify, or cancel a room; as an admin, I want to see booking statuses in a calendar."
    expected_behavior: "The system supports full booking lifecycle (new, update, cancel) and displays availability in a calendar interface."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-003 # Booking Form
      - SCR-005 # Calendar
      - SCR-008 # Bookings Index
      - SCR-009 # Booking Edit
      - SCR-014 # Booking Statuses Index
      - SCR-022 # Booking Status Create
      - SCR-023 # Booking Status Edit
      - SCR-028 # Booking Show

  - id: RQ-006
    requirement: "Booking Sources"
    description: "Record the origin of bookings (website, third‑party) and allow reporting by source."
    user_story: "As an operations manager, I want to know where each booking came from so I can analyze channel performance."
    expected_behavior: "Every booking record includes a "source" field; reports can aggregate bookings by source type and date range."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-015 # Booking Sources Index
      - SCR-024 # Booking Source Create
      - SCR-025 # Booking Source Edit

  - id: RQ-007
    requirement: "Customer Management"
    description: "CRUD for customers, with the ability to link customers to bookings."
    user_story: "As a tenant admin, I want to manage customer information and track their booking history."
    expected_behavior: "System allows creating, updating, and viewing customers and their associated bookings."
    type: "Functional"
    status: "Implemented"
    screens:
      - SCR-012 # Customers Index
      - SCR-013 # Customer Create
      - SCR-026 # Customer Show
      - SCR-027 # Customer Edit

  - id: RQ-008
    requirement: "Notifications"
    description: "Optional email or in‑app alerts for booking changes or tenant invites."
    user_story: "As a user, I want to receive notifications when my booking changes or when I'm invited to a tenant."
    expected_behavior: "Email and/or in‑app notifications are sent on booking status changes and tenant invitation events."
    type: "Functional"
    status: "Planned"
    screens: []

  - id: RQ-009
    requirement: "Testing"
    description: "Automated tests (using Pest for Laravel) covering core CRUD, authentication, and multi‑tenant constraints."
    user_story: "As a developer, I want automated tests for core features so I can ensure stability and catch regressions."
    expected_behavior: "A suite of Pest tests verifies CRUD operations, auth flows, and tenant isolation rules; CI fails if any test breaks."
    type: "Non‑functional"
    status: "Implemented"
    screens: []
